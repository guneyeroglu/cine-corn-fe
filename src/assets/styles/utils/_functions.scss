@mixin calculate-width($element-count, $gap) {
  width: calc((100% - ($element-count - 1) * $gap) / $element-count);
}

@mixin responsive-container() {
  width: 100%;
  margin: 0 auto;
  max-width: 1800px;
  padding: 0 16px;

  @media screen and (max-width: 1800px) {
    max-width: 1440px;
  }

  @media screen and (max-width: 1440px) {
    max-width: 1024px;
  }

  @media screen and (max-width: 1024px) {
    max-width: 800px;
    padding: 0 8px;
  }

  @media screen and (max-width: 800px) {
    max-width: 600px;
  }

  @media screen and (max-width: 600px) {
    max-width: 425px;
  }

  @media screen and (max-width: 425px) {
    max-width: 375px;
  }
}

@mixin responsive-list() {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: flex-start;
  gap: 16px;

  li {
    @include calculate-width(8, 16px);
  }

  @media screen and (max-width: 1800px) {
    li {
      @include calculate-width(7, 16px);

      &.loading:nth-child(n + 8) {
        display: none;
      }
    }
  }

  @media screen and (max-width: 1440px) {
    li {
      @include calculate-width(5, 16px);

      &.loading:nth-child(n + 6) {
        display: none;
      }
    }
  }

  @media screen and (max-width: 1024px) {
    column-gap: 12px;

    li {
      @include calculate-width(4, 12px);

      &.loading:nth-child(n + 5) {
        display: none;
      }
    }
  }

  @media screen and (max-width: 800px) {
    li {
      @include calculate-width(3, 12px);

      &.loading:nth-child(n + 4) {
        display: none;
      }
    }
  }

  @media screen and (max-width: 600px) {
    column-gap: 8px;

    li {
      @include calculate-width(2, 8px);

      &.loading:nth-child(n + 3) {
        display: none;
      }
    }
  }

  @media screen and (max-width: 425px) {
    gap: 16px;
    justify-content: center;

    li {
      max-width: 225px;
      @include calculate-width(1, 16px);

      &.loading:nth-child(n + 2) {
        display: none;
      }
    }
  }
}

@function convert-to-rgba($color, $opacity: 1) {
  @return rgba($color, $opacity);
}

@mixin opacity-border($position, $px: 0, $color: colors.$white-20) {
  &::before {
    content: '';
    position: absolute;
    left: 1rem;
    right: 1rem;
    height: 1px;
    #{$position}: $px;
    background: linear-gradient(to right, transparent, $color, transparent);
    border-radius: 10px;
    transition: all 0.35s ease;
  }
}
